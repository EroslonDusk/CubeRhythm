
#
#	在给定时间内将实体从一点移动到另一点，期间实体的位置和变化速度取决于给出的缓动函数
#	只需给定两点坐标和缓动函数可以实现非线性运动，比如抛出物品等一些复杂动画
#	关于缓动函数的相关信息及效果预览，请查阅 https://easings.net/zh-cn
#
#	easingMotion(实体(变量), 开始位置(变量), 结束位置(变量), "X坐标缓动函数名称/ID", "Y坐标缓动函数名称/ID", "Z坐标缓动函数名称/ID", "Yaw缓动函数名称/ID", "Pitch缓动函数名称/ID", 持续时间(Tick数))
#
#	easingMotion({_entity}, {_loc1}, {_loc2}, "sina", "sina", "sina", "1", "1", 20)
#
#	缓动函数名称与ID对照如下：
#	全名                  ID
#	Linear                1
#
#	easeInSine            sina
#	easeOutSine           sinb
#	easeInOutSine         sinc
#
#	easeInQuad            2a
#	easeOutQuad           2b
#	easeInOutQuad         2c
#
#	easeInCubic           3a
#	easeOutCubic          3b
#	easeInOutCubic        3c
#
#	easeInQuart           4a
#	easeOutQuart          4b
#	easeInOutQuart        4c
#
#	easeInQuint           5a
#	easeOutQuint          5b
#	easeInOutQuint        5c
#
#	easeInExpo            expa
#	easeOutExpo           expb
#	easeInOutExpo         expc
#
#	easeInCirc            cira
#	easeOutCirc           cirb
#	easeInOutCirc         circ
#
#	easeInBack            backa
#	easeOutBack           backb
#	easeInOutBack         backc
#
#	easeInElastic         elaa
#	easeOutElastic        elab
#	easeInOutElastic      elac
#
#	easeInBounce          bouna
#	easeOutBounce         bounb
#	easeInOutBounce       bounc
#

function easingMotion(entity: entity, from: location, to: location, XmotionType: text, YmotionType: text, ZmotionType: text, WmotionType: text, PmotionType: text, duration: integer):
	set {_x1} to x location of {_from}
	set {_x2} to x location of {_to}
	set {_y1} to y location of {_from}
	set {_y2} to y location of {_to}
	set {_z1} to z location of {_from}
	set {_z2} to z location of {_to}
	set {_yaw1} to yaw of {_from}
	set {_yaw2} to yaw of {_to}
	set {_pitch1} to pitch of {_from}
	set {_pitch2} to pitch of {_to}
	set {_tick} to 0
	loop {_duration} times:
		wait 1 tick
		add 1 to {_tick}
		set {_tickrate} to ({_tick} / {_duration})
		set {_x} to ({_x1} + ({_x2} - {_x1}) * calcEasingValue({_tickrate}, {_XmotionType}))
		set {_y} to ({_y1} + ({_y2} - {_y1}) * calcEasingValue({_tickrate}, {_YmotionType}))
		set {_z} to ({_z1} + ({_z2} - {_z1}) * calcEasingValue({_tickrate}, {_ZmotionType}))
		set {_yaw} to ({_yaw1} + ({_yaw2} - {_yaw1}) * calcEasingValue({_tickrate}, {_WmotionType}))
		set {_pitch} to ({_pitch1} + ({_pitch2} - {_pitch1}) * calcEasingValue({_tickrate}, {_PmotionType}))
		teleport {_entity} to location({_x}, {_y}, {_z}, world "world", {_yaw}, {_pitch})

function calcEasingValue(x: number, type: text) :: number:
	set {_y} to {_x}
	if {_x} <= 0:
		set {_y} to 0
	else if {_x} >= 1:
		set {_y} to 1
	else:
		set {_y} to ({_x}) if {_type} is "linear" or "1" or ""
		set {_y} to (1 - cos(({_x} * -180) / 2)) if {_type} is "easeInSine" or "sina"
		set {_y} to (sin(({_x} * 180) / 2)) if {_type} is "easeOutSine" or "sinb"
		set {_y} to (-1 * (cos(180 * {_x}) - 1) / 2) if {_type} is "easeInOutSine" or "sinc"
		set {_y} to ({_x} ^ 2) if {_type} is "easeInQuad" or "2a"
		set {_y} to (1 - (1 - {_x}) ^ 2) if {_type} is "easeOutQuad" or "2b"
		if {_x} < 0.5:
			set {_y} to (2 * {_x} ^ 2) if {_type} is "easeInOutQuad" or "2c"
		else:
			set {_y} to (1 - (-2 * {_x} + 2) ^ 2 / 2) if {_type} is "easeInOutQuad" or "2c"
		set {_y} to ({_x} ^ 3) if {_type} is "easeInCubic" or "3a"
		set {_y} to (1 - (1 - {_x}) ^ 3) if {_type} is "easeOutCubic" or "3b"
		if {_x} < 0.5:
			set {_y} to (4 * {_x} ^ 3) if {_type} is "easeInOutCubic" or "3c"
		else:
			set {_y} to (1 - (-2 * {_x} + 2) ^ 3 / 2) if {_type} is "easeInOutCubic" or "3c"
		set {_y} to ({_x} ^ 4) if {_type} is "easeInQuart" or "4a"
		set {_y} to (1 - (1 - {_x}) ^ 4) if {_type} is "easeOutQuart" or "4b"
		if {_x} < 0.5:
			set {_y} to (8 * {_x} ^ 4) if {_type} is "easeInOutQuart" or "4c"
		else:
			set {_y} to (1 - (-2 * {_x} + 2) ^ 4 / 2) if {_type} is "easeInOutQuart" or "4c"
		set {_y} to ({_x} ^ 5) if {_type} is "easeInQuint" or "5a"
		set {_y} to (1 - (1 - {_x}) ^ 5) if {_type} is "easeInQuint" or "5b"
		if {_x} < 0.5:
			set {_y} to (16 * {_x} ^ 5) if {_type} is "easeInOutQuint" or "5c"
		else:
			set {_y} to (1 - (-2 * {_x} + 2) ^ 5 / 2) if {_type} is "easeInOutQuint" or "5c"
		set {_y} to (2 ^ (10 * {_x} - 10)) if {_type} is "easeInExpo" or "expa"
		set {_y} to (1 - 2 ^ (-10 * {_x})) if {_type} is "easeOutExpo" or "expb"
		if {_x} < 0.5:
			set {_y} to (2 ^ (20 * {_x} - 10) / 2) if {_type} is "easeInOutExpo" or "expc"
		else:
			set {_y} to ((2 - 2 ^ (-20 * {_x} + 10)) / 2) if {_type} is "easeInOutExpo" or "expc"
		set {_y} to (1 - sqrt(1 - {_x} ^ 2)) if {_type} is "easeInCirc" or "cira"
		set {_y} to (sqrt(1 - ({_x} - 1) ^ 2)) if {_type} is "easeOutCirc" or "cirb"
		if {_x} < 0.5:
			set {_y} to ((1 - sqrt(1 - (2 * {_x}) ^ 2)) / 2) if {_type} is "easeInOutCirc" or "circ"
		else:
			set {_y} to ((sqrt(1 - (-2 * {_x} + 2) ^ 2) + 1) / 2) if {_type} is "easeInOutCirc" or "circ"
		set {_y} to (2.70158 * {_x} ^ 3 - 1.70158 * {_x} ^ 2) if {_type} is "easeInBack" or "backa"
		set {_y} to (1 + 2.70158 * ({_x} - 1) ^ 3 + 1.70158 * ({_x} - 1) ^ 2) if {_type} is "easeOutBack" or "backb"
		if {_x} < 0.5:
			set {_y} to (((2 * {_x}) ^ 2 * ((2.5949095 + 1) * 2 * {_x} - 2.5949095)) / 2) if {_type} is "easeInOutBack" or "backc"
		else:
			set {_y} to (((2 * {_x} - 2) ^ 2 * ((2.5949095 + 1) * ({_x} * 2 - 2) + 2.5949095) + 2) / 2) if {_type} is "easeInOutBack" or "backc"
		set {_c4} to (2 * 180) / 3
		set {_y} to (-1 * 2 ^ (10 * {_x} - 10) * sin(({_x} * 10 - 10.75) * {_c4})) if {_type} is "easeInElastic" or "elaa"
		set {_y} to (2 ^ (-10 * {_x}) * sin(({_x} * 10 - 0.75) * {_c4}) + 1) if {_type} is "easeOutElastic" or "elab"
		set {_c5} to (2 * 180) / 4.5
		if {_x} < 0.5:
			set {_y} to (-1 * (2 ^ (20 * {_x} - 10) * sin((20 * {_x} - 11.125) * {_c5})) / 2) if {_type} is "easeInOutElastic" or "elac"
		else:
			set {_y} to ((2 ^ (-20 * {_x} + 10) * sin((20 * {_x} - 11.125) * {_c5})) / 2 + 1) if {_type} is "easeInOutElastic" or "elac"
		set {_y} to (1 - calcEasingValue((1 - {_x}), "easeOutBounce")) if {_type} is "easeInBounce" or "bouna"
		set {_n1} to 7.5625
		set {_d1} to 2.75
		if {_x} < (1 / {_d1}):
			set {_y} to ({_n1} * {_x} ^ 2) if {_type} is "easeOutBounce" or "bounb"
		else if {_x} < (2 / {_d1}):
			set {_x} to {_x} - 1.5 / {_d1}
			set {_y} to ({_n1} * {_x} * {_x} + 0.75) if {_type} is "easeOutBounce" or "bounb"
		else if {_x} < (2.5 / {_d1}):
			set {_x} to {_x} - 2.25 / {_d1}
			set {_y} to ({_n1} * {_x} * {_x} + 0.9375) if {_type} is "easeOutBounce" or "bounb"
		else:
			set {_x} to {_x} - 2.625 / {_d1}
			set {_y} to ({_n1} * {_x} * {_x} + 0.984375) if {_type} is "easeOutBounce" or "bounb"
		if {_x} < 0.5:
			set {_y} to ((1 - calcEasingValue((1 - 2 * {_x}), "easeOutBounce")) / 2) if {_type} is "easeInOutBounce" or "bounc" #这家伙有问题
		else:
			set {_y} to ((1 + calcEasingValue((2 * {_x} - 1), "easeOutBounce")) / 2) if {_type} is "easeInOutBounce" or "bounc" #这家伙有问题
	return {_y}