function drawLine(face: text, x: number, y: number, z: number, pitch: number, length: number, duration: number, glowing: boolean, gc1: number, gc2: number, gc3: number, gc4: number):
	{_duration} > 2
	set {_x} to {_x}+0.5
	set {_y} to {_y}-0.5
	set {_z} to {_z}+1+{speed::%uuid of {actor}%}
	if {_face} is "w":
		set {_loc} to location({_x}, {_y}+1, {_z}-0.95, world "world", 0, 0)
	if {_face} is "a":
		remove 1 from {_x}
		set {_loc} to location({_z}-0.95, {_y}+1, -1*{_x}, world "world", 90, 0)
	if {_face} is "s":
		remove 1 from {_x}
		remove 1 from {_z}
		set {_loc} to location(-1*{_x}, {_y}+1, -1*{_z}+0.95, world "world", 180, 0)
	if {_face} is "d":
		remove 1 from {_z}
		set {_loc} to location(-1*{_z}+0.95, {_y}+1, {_x}, world "world", 270, 0)
	summon block display at {_loc}:
		set display interpolation start of entity to 0
		set display interpolation duration of entity to 100
		set display block data of entity to white_concrete
		set display scale of entity to vector(0.05,{_length},0.05)
		set metadata value "face" of entity to {_face}
		set metadata value "decoration" of entity to true
		set pitch of entity to {_pitch}
		set yaw of entity to 90 if {_face} is "w"
		set yaw of entity to 0 if {_face} is "a"
		set yaw of entity to -90 if {_face} is "s"
		set yaw of entity to -180 if {_face} is "d"
		if {_glowing} is true:
			set glowing of entity to true
			set display glow color override of entity to bukkitColor({_gc1},{_gc2},{_gc3},{_gc4})
		set {_entity} to entity
	wait 2 ticks
	set display brightness of {_entity} to displayBrightness(15,15)
	set display translation of {_entity} to vector(-100*{speed::%uuid of {actor}%}, 0, 0) if {_face} is "w" or "s"
	set display translation of {_entity} to vector(-100*{speed::%uuid of {actor}%}, 0, 0) if {_face} is "a" or "d"
	loop {_duration}-2 times:
		wait 1 tick
	loop all block displays:
		loop-entity is {_entity}
		delete loop-entity
		exit loop
#
#	直接在谱面中绘制线段，与小节线生成原理相同
#	从x y z开始，length为长度，pitch-90°为旋转角度射出的一条线段
#	会随谱面同步移动，时间到消失
#
#	drawLine("判定面", X, Y, Z, 旋转角度(-90到90，0为竖直向上), 长度, 持续时间(Tick数), 是否发光, 发光不透明度, 发光颜色R值, 发光颜色G值, 发光颜色B值)
#



function blind(duration: timespan):
	apply blindness without any particles to {actor} for 1 hour
	loop all block displays:
		metadata value "decoration" of loop-entity is true
		set glowing of loop-entity to true
	wait {_time}
	remove blindness from {actor}
	loop all block displays:
		metadata value "decoration" of loop-entity is true
		set glowing of loop-entity to false
#
#	给予玩家一段时间失明效果，失明生效时小节线发光
#
#	blind(时间(使用skript格式))
#
#	举个例子:
#
#on load:
#	create section stored in {blind1}:
#		blind(1.5 seconds)
#		delete {blind1}



function forceExact(ticks: integer, tag: text):
	loop {ticks} times:
		{actor} is set
		loop all interactions:
			set metadata value "forceexact" of loop-entity to true if metadata value "tag" of loop-entity is {_tag}
		wait 1 tick
	loop all interactions:
		delete metadata value "forceexact" of loop-entity if metadata value "tag" of loop-entity is {_tag}
#
#	超级时间，该时间内轨道上拥有特定Tag的音符，击中不会产生Just判定
#
#	forceExact(持续时间(Tick数), "Tag")
#
#	举个例子：
#
#on load:
#	create section stored in {st1}:
#		forceExact(20, "custom")
#		delete {st1}



function setTextDisplay(face: text, x: number, y: number, z: number, pitch: number, scale: number, opacity: number, duration: timespan, text: text):
	add 0.5 to {_x}
	remove 1 from {_x} if {_face} is "s" or "a"
	add 1 to {_z} if {_face} is "w" or "a"
	remove 0.5 from {_y}
	if {_face} is "w":
		set {_loc} to location({_x}, {_y}, {_z}, world "world", -90, {_pitch})
	if {_face} is "a":
		set {_loc} to location({_z}, {_y}, -1*{_x}, world "world", 180, {_pitch})
	if {_face} is "s":
		set {_loc} to location(-1*{_x}, {_y}, -1*{_z}, world "world", 90, {_pitch})
	if {_face} is "d":
		set {_loc} to location(-1*{_z}, {_y}, {_x}, world "world", 0, {_pitch})
	{_loc}.add(0, 1, 0)
	summon text display at {_loc}:
		set display text of the entity to {_text} if {showOffset::%uuid of {actor}%} is not "&a开"
		set display scale of the entity to vector({_scale},{_scale},{_scale})
		set display right rotation of the entity to axisAngle(90 * (3.14 / 180), 0, 1, 0)
		set display translation of the entity to vector({_scale}*-0.015,{_scale}*-0.15,0)
		set display text opacity of the entity to {_opacity}
		set display text background color of the entity to bukkitColor(0,0,0,0)
		set {_entity} to entity
	wait {_duration}
	loop all text displays:
		loop-entity is {_entity}
		delete loop-entity
#
#	以前方判定面为基准，x y z为坐标，生成文字展示实体并持续一段时间
#	如果你需要在非前判定面生成，坐标仍按照前判定面的格式，脚本会自动更正
#
#	setTextDisplay("判定面", X, Y, Z, 旋转角度(-90到90，0为水平), 缩放倍数, 不透明度(最大255), 持续时间(使用skript格式), "文本")
#
#	举个例子，加载后会在四周贴上“福字”，持续10秒：
#
#on load:
#	setTextDisplay("w", 0, 0, 4, 45, 8, 255, 10 seconds, "&c█")
#	setTextDisplay("a", 0, 0, 4, 45, 8, 255, 10 seconds, "&c█")
#	setTextDisplay("s", 0, 0, 4, 45, 8, 255, 10 seconds, "&c█")
#	setTextDisplay("d", 0, 0, 4, 45, 8, 255, 10 seconds, "&c█")
#	setTextDisplay("w", 0.075, -0.075, 4, 45, 8, 255, 10 seconds, "&e▄")
#	setTextDisplay("a", 0.075, -0.075, 4, 45, 8, 255, 10 seconds, "&e▄")
#	setTextDisplay("s", 0.075, -0.075, 4, 45, 8, 255, 10 seconds, "&e▄")
#	setTextDisplay("d", 0.075, -0.075, 4, 45, 8, 255, 10 seconds, "&e▄")
#	setTextDisplay("w", 0, 0.075, 3.95, 0, 4, 255, 10 seconds, "&c福")
#	setTextDisplay("a", 0, 0.075, 3.95, 0, 4, 255, 10 seconds, "&c福")
#	setTextDisplay("s", 0, 0.075, 3.95, 0, 4, 255, 10 seconds, "&c福")
#	setTextDisplay("d", 0, 0.075, 3.95, 0, 4, 255, 10 seconds, "&c福")



function changeGlowingColor(tag: text, opacity: number, r: number, g: number, b: number, duration: integer):
	loop {duration} times:
		{actor} is set
		wait 1 tick
		loop all block displays:
			set display glow color override of loop-entity to bukkitColor({_opacity},{_r},{_g},{_b}) if metadata value "tag" of loop-entity is {_tag}
#
#	在一段时间内更改轨道上拥有特定Tag的音符的发光颜色
#
#	changeGlowingColor("Tag", 发光不透明度, R, G, B, 持续时间(Tick数))
#


function hideNote(tag: text, duration: integer):
	loop {duration} times:
		{actor} is set
		wait 1 tick
		loop all block displays:
			delete loop-entity if metadata value "tag" of loop-entity is {_tag}
#
#	在一段时间内删除轨道上拥有特定Tag的方块展示实体以实现隐藏音符
#
#	hideNote("Tag", 持续时间(Tick数))
#



function easingMotion(entity: entity, from: location, to: location, XmotionType: text, YmotionType: text, ZmotionType: text, PmotionType: text, duration: integer):
	set {_x1} to x location of {_from}
	set {_x2} to x location of {_to}
	set {_y1} to y location of {_from}
	set {_y2} to y location of {_to}
	set {_z1} to z location of {_from}
	set {_z2} to z location of {_to}
	set {_yaw1} to yaw of {_from}
	set {_yaw2} to yaw of {_to}
	set {_pitch1} to pitch of {_from}
	set {_pitch2} to pitch of {_to}
	set {_tick} to 0
	loop {_duration} times:
		wait 1 tick
		add 1 to {_tick}
		set {_tickrate} to ({_tick} / {_duration})
		set {_x} to ({_x1} + ({_x2} - {_x1}) * calcEasingValue({_tickrate}, {_XmotionType}))
		set {_y} to ({_y1} + ({_y2} - {_y1}) * calcEasingValue({_tickrate}, {_YmotionType}))
		set {_z} to ({_z1} + ({_z2} - {_z1}) * calcEasingValue({_tickrate}, {_ZmotionType}))
		set {_yaw} to ({_yaw1} + ({_yaw2} - {_yaw1}) * calcEasingValue({_tickrate}, {_PmotionType}))
		set {_pitch} to ({_pitch1} + ({_pitch2} - {_pitch1}) * calcEasingValue({_tickrate}, {_PmotionType}))
		teleport {_entity} to location({_x}, {_y}, {_z}, world "world", {_yaw}, {_pitch})

function calcEasingValue(x: number, type: text) :: number:
	set {_y} to {_x}
	if {_x} <= 0:
		set {_y} to 0
	else if {_x} >= 1:
		set {_y} to 1
	else:
		set {_y} to ({_x}) if {_type} is "linear" or "1" or ""
		set {_y} to (1 - cos(({_x} * -180) / 2)) if {_type} is "easeInSine" or "sina"
		set {_y} to (sin(({_x} * 180) / 2)) if {_type} is "easeOutSine" or "sinb"
		set {_y} to (-1 * (cos(180 * {_x}) - 1) / 2) if {_type} is "easeInOutSine" or "sinc"
		set {_y} to ({_x} ^ 2) if {_type} is "easeInQuad" or "2a"
		set {_y} to (1 - (1 - {_x}) * (1 - {_x})) if {_type} is "easeOutQuad" or "2b"
		if {_x} < 0.5:
			set {_y} to (2 * {_x} ^ 2) if {_type} is "easeInOutQuad" or "2c"
		else:
			set {_y} to (1 - (-2 * {_x} + 2) ^ 2 / 2) if {_type} is "easeInOutQuad" or "2c"
		set {_y} to ({_x} ^ 3) if {_type} is "easeInCubic" or "3a"
		set {_y} to ((1 - {_x}) ^ 3) if {_type} is "easeOutCubic" or "3b"
		if {_x} < 0.5:
			set {_y} to (4 * {_x} ^ 3) if {_type} is "easeInOutCubic" or "3c"
		else:
			set {_y} to (1 - (-2 * {_x} + 2) ^ 3 / 2) if {_type} is "easeInOutCubic" or "3c"
		set {_y} to ({_x} ^ 4) if {_type} is "easeInQuart" or "4a"
		set {_y} to ((1 - {_x}) ^ 4) if {_type} is "easeOutQuart" or "4b"
		if {_x} < 0.5:
			set {_y} to (8 * {_x} ^ 4) if {_type} is "easeInOutQuart" or "4c"
		else:
			set {_y} to (1 - (-2 * {_x} + 2) ^ 4 / 2) if {_type} is "easeInOutQuart" or "4c"
		set {_y} to ({_x} ^ 5) if {_type} is "easeInQuint" or "5a"
		set {_y} to ((1 - {_x}) ^ 5) if {_type} is "easeInQuint" or "5b"
		if {_x} < 0.5:
			set {_y} to (16 * {_x} ^ 5) if {_type} is "easeInOutQuint" or "5c"
		else:
			set {_y} to (1 - (-2 * {_x} + 2) ^ 5 / 2) if {_type} is "easeInOutQuint" or "5c"
		set {_y} to (2 ^ (10 * {_x} - 10)) if {_type} is "easeInExpo" or "expa"
		set {_y} to (1 - 2 ^ (-10 * {_x})) if {_type} is "easeOutExpo" or "expb"
		if {_x} < 0.5:
			set {_y} to (2 ^ (20 * {_x} - 10) / 2) if {_type} is "easeInOutExpo" or "expc"
		else:
			set {_y} to ((2 - 2 ^ (-20 * {_x} + 10)) / 2) if {_type} is "easeInOutExpo" or "expc"
		set {_y} to (1 - sqrt(1 - {_x} ^ 2)) if {_type} is "easeInCirc" or "cira"
		set {_y} to (sqrt(1 - ({_x} - 1) ^ 2)) if {_type} is "easeOutCirc" or "cirb"
		if {_x} < 0.5:
			set {_y} to ((1 - sqrt(1 - (2 * {_x}) ^ 2)) / 2) if {_type} is "easeInOutCirc" or "circ"
		else:
			set {_y} to ((sqrt(1 - (-2 * {_x} + 2) ^ 2) + 1) / 2) if {_type} is "easeInOutCirc" or "circ"
		set {_y} to (2.70158 * {_x} ^ 3 - 1.70158 * {_x} ^ 2) if {_type} is "easeInBack" or "backa"
		set {_y} to (1 + 2.70158 * ({_x} - 1) ^ 3 + 1.70158 * ({_x} - 1) ^ 2) if {_type} is "easeOutBack" or "backb"
		if {_x} < 0.5:
			set {_y} to (((2 * {_x}) ^ 2 * ((2.5949095 + 1) * 2 * {_x} - 2.5949095)) / 2) if {_type} is "easeInOutBack" or "backc"
		else:
			set {_y} to (((2 * {_x} - 2) ^ 2 * ((2.5949095 + 1) * ({_x} * 2 - 2) + 2.5949095) + 2) / 2) if {_type} is "easeInOutBack" or "backc"
		set {_c4} to (2 * 180) / 3
		set {_y} to (-1 * 2 ^ (10 * {_x} - 10) * sin(({_x} * 10 - 10.75) * {_c4})) if {_type} is "easeInElastic" or "elaa"
		set {_y} to (2 ^ (-10 * {_x}) * sin(({_x} * 10 - 0.75) * {_c4}) + 1) if {_type} is "easeOutElastic" or "elab"
		set {_c5} to (2 * 180) / 4.5
		if {_x} < 0.5:
			set {_y} to (-1 * (2 ^ (20 * {_x} - 10) * sin((20 * {_x} - 11.125) * {_c5})) / 2) if {_type} is "easeInOutElastic" or "elac"
		else:
			set {_y} to ((2 ^ (-20 * {_x} + 10) * sin((20 * {_x} - 11.125) * {_c5})) / 2 + 1) if {_type} is "easeInOutElastic" or "elac"
	return {_y}
#
#	在给定时间内将实体从一点移动到另一点，期间实体的位置和变化速度取决于给出的缓动函数
#	可以实现非线性运动，比如结算界面的UI动画等
#	关于缓动函数的相关信息及效果预览，请查阅 https://easings.net/zh-cn
#
#	easingMotion(实体(变量), 开始位置(变量), 结束位置(变量), "X坐标缓动函数名称/ID", "Y坐标缓动函数名称/ID", "Z坐标缓动函数名称/ID", "Yaw&Pitch缓动函数名称/ID", 持续时间(Tick数))
#
#	暂不支持 easeInBounce easeOutBounce easeInOutBounce
#
#	举个例子:
#on load:
#	delete all block displays
#	set {_loc1} to location(8, -4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, 4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "1", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, 4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, -4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "sinc", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, -4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, 4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "2c", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, 4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, -4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "3c", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, -4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, 4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "4c", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, 4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, -4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "5c", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, -4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, 4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "expc", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, 4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, -4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "circ", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, -4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, 4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "backc", "1", "1", 60)
#		wait 5 ticks
#	set {_loc1} to location(8, 4, 10, world "world", 0, 0)
#	set {_loc2} to location(-8, -4, 10, world "world", 0, 0)
#	loop 5 times:
#		summon block display at {_loc1}:
#			set display block data of entity to diamond_block
#			set display scale of entity to vector(1,1,1)
#			set glowing of entity to true
#			set display glow color override of entity to bukkitColor(0,50,255,255)
#			easingMotion(entity, {_loc1}, {_loc2}, "1", "elac", "1", "1", 60)
#		wait 5 ticks