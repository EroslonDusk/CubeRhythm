
import:
    java.io.File
    java.io.FileInputStream   
    java.io.FileOutputStream     
    org.bukkit.Bukkit   
    com.sk89q.worldedit.WorldEdit     
    com.sk89q.worldedit.bukkit.BukkitWorld
    com.sk89q.worldedit.regions.CuboidRegion    
    com.sk89q.worldedit.function.pattern.BlockPattern    
    com.sk89q.worldedit.function.operation.Operations     
    com.sk89q.worldedit.extent.clipboard.BlockArrayClipboard
    com.sk89q.worldedit.function.operation.ForwardExtentCopy
    com.sk89q.worldedit.world.block.BlockTypes
    com.sk89q.worldedit.extension.input.ParserContext

    re.imc.worldeditlib.WorldEditLib
    
on load:
    delete {-worldeditAPI::*}
    set {-worldeditAPI::BaseBlock6} to class "com.sk89q.worldedit.blocks.BaseBlock" 
    set {-worldeditAPI::BukkitUtil} to class "com.sk89q.worldedit.bukkit.BukkitUtil" 
    set {-worldeditAPI::BlockVector3} to class "com.sk89q.worldedit.math.BlockVector3"   
    set {-worldeditAPI::BaseBlock7} to class "com.sk89q.worldedit.world.block.BaseBlock"  
    set {-worldeditAPI::Schematic} to class "com.boydti.fawe.object.schematic.Schematic"   
    set {-worldeditAPI::BukkitAdapter} to class "com.sk89q.worldedit.bukkit.BukkitAdapter"  
    set {-worldeditAPI::ClipboardFormat} to class "com.sk89q.worldedit.extent.clipboard.io.ClipboardFormat"    
    set {-worldeditAPI::ClipboardFormats} to class "com.sk89q.worldedit.extent.clipboard.io.ClipboardFormats"    
    set {-worldeditAPI::BuiltInClipboardFormat} to class "com.sk89q.worldedit.extent.clipboard.io.BuiltInClipboardFormat"   
    
function worldeditAPI(loc: location) :: object:
    if {-worldeditAPI::BlockVector3} is not set:
        return {-worldeditAPI::BukkitUtil}.toVector({_loc})
    else:
        return {-worldeditAPI::BlockVector3}.at({_loc}.getBlockX(), {_loc}.getBlockY() and {_loc}.getBlockZ())
        
        


effect replace blocks (within|between) %location% and %location% with pattern %string%:
    trigger:
        WorldEditLib.replaceBlocks(expr-1, expr-2, expr-3)
        

effect replace blocks (within|between) %location% and %location% with %item%:
    trigger:
        set {_w} to new BukkitWorld(expr-2.getWorld())   
        set {_region} to new CuboidRegion({_w}, worldeditAPI(expr-1) and worldeditAPI(expr-2))     
        set {_editSession} to WorldEdit.getInstance().getEditSessionFactory().getEditSession({_w} and -1)           
        if {-worldeditAPI::BlockVector3} is not set:     
            set {_baseBlock} to new BlockPattern(new {-worldeditAPI::BaseBlock6}((random item of expr-3).getTypeId()))
        else:
            set {_baseBlock} to new BlockPattern(new {-worldeditAPI::BaseBlock7}({-worldeditAPI::BukkitAdapter}.asBlockState(random item of expr-3)))
        await {_editSession}.setBlocks({_region} and {_baseBlock})            
        {_editSession}.flushQueue()
        

effect paste schematic %string% at %location%:
    trigger:
        if {-worldeditAPI::Schematics::%expr-1%} is not set:
            set {_file} to new File(expr-1)
            if {-worldeditAPI::BlockVector3} is not set:
                set {-worldeditAPI::Schematics::%expr-1%} to {-worldeditAPI::ClipboardFormat}.findByFile({_file}).load({_file})
            else:
                set {-worldeditAPI::Schematics::%expr-1%} to {-worldeditAPI::ClipboardFormats}.findByFile({_file}).load({_file})
        await {-worldeditAPI::Schematics::%expr-1%}.paste(new BukkitWorld(expr-2.getWorld()), worldeditAPI(expr-2), false, true and null)  

effect save schematic %object% to file %string%:
    trigger:
        set {_clipboard} to expr-1
        set {_schematic} to new File(expr-2)
        {_schematic}.getParentFile().mkdirs()
        set {_writer} to {-worldeditAPI::BuiltInClipboardFormat}.SPONGE_SCHEMATIC.getWriter(new FileOutputStream({_schematic}))
        {_writer}.write({_clipboard})
        {_writer}.close()
effect save schematic %string% from %location% and %location%:
    trigger:
        set {_schematic} to new File(expr-1)    
        set {_region} to new CuboidRegion(new BukkitWorld(expr-2.getWorld()), worldeditAPI(expr-2) and worldeditAPI(expr-3)) 
        if {-worldeditAPI::BlockVector3} is not set:
            set {_schematic} to new {-worldeditAPI::Schematic}({_region})
            {_schematic}.getClipboard().setOrigin(worldeditAPI(expr-2))
            {_schematic}.save({_schematic} and {-worldeditAPI::ClipboardFormat}.SCHEMATIC)
            stop      
        set {_clipboard} to new BlockArrayClipboard({_region})
        set {_editSession} to WorldEdit.getInstance().getEditSessionFactory().getEditSession({_region}.getWorld() and -1)
        set {_forwardExtentCopy} to new ForwardExtentCopy({_editSession}, {_region}, {_clipboard} and {_region}.getMinimumPoint())
        {_forwardExtentCopy}.setCopyingEntities(false)
        {_clipboard}.setOrigin(worldeditAPI(expr-2))
        Operations.complete({_forwardExtentCopy})
        set {_writer} to {-worldeditAPI::BuiltInClipboardFormat}.SPONGE_SCHEMATIC.getWriter(new FileOutputStream({_schematic}))
        {_writer}.write({_clipboard})
        {_writer}.close()

effect paste %object% at %location%:
    trigger:
        await expr-1.paste(new BukkitWorld(expr-2.getWorld()), worldeditAPI(expr-2), false, true and null)  

expression schematic at %location% from %location% and %location%:
    return type: object
    get:
        set {_region} to new CuboidRegion(new BukkitWorld(expr-1.getWorld()), worldeditAPI(expr-2) and worldeditAPI(expr-3))       
        set {_clipboard} to new BlockArrayClipboard({_region})
        set {_editSession} to WorldEdit.getInstance().getEditSessionFactory().getEditSession({_region}.getWorld() and -1)
        set {_forwardExtentCopy} to new ForwardExtentCopy({_editSession}, {_region}, {_clipboard} and {_region}.getMinimumPoint())
        {_forwardExtentCopy}.setCopyingEntities(false)
        {_clipboard}.setOrigin(worldeditAPI(expr-1))
        Operations.complete({_forwardExtentCopy})
        return {_clipboard}